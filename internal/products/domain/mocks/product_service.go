// Code generated by mockery v2.12.3. DO NOT EDIT.

package mocks

import (
	domain "arquitetura-go/internal/products/domain"
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// ProductService is an autogenerated mock type for the ProductService type
type ProductService struct {
	mock.Mock
}

// Delete provides a mock function with given fields: ctx, id
func (_m *ProductService) Delete(ctx context.Context, id int) error {
	ret := _m.Called(ctx, id)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetAll provides a mock function with given fields: ctx
func (_m *ProductService) GetAll(ctx context.Context) ([]domain.Product, error) {
	ret := _m.Called(ctx)

	var r0 []domain.Product
	if rf, ok := ret.Get(0).(func(context.Context) []domain.Product); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.Product)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Store provides a mock function with given fields: ctx, name, typee, count, price
func (_m *ProductService) Store(ctx context.Context, name string, typee string, count int, price float64) (domain.Product, error) {
	ret := _m.Called(ctx, name, typee, count, price)

	var r0 domain.Product
	if rf, ok := ret.Get(0).(func(context.Context, string, string, int, float64) domain.Product); ok {
		r0 = rf(ctx, name, typee, count, price)
	} else {
		r0 = ret.Get(0).(domain.Product)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string, int, float64) error); ok {
		r1 = rf(ctx, name, typee, count, price)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: ctx, id, name, productType, count, price
func (_m *ProductService) Update(ctx context.Context, id int, name string, productType string, count int, price float64) (domain.Product, error) {
	ret := _m.Called(ctx, id, name, productType, count, price)

	var r0 domain.Product
	if rf, ok := ret.Get(0).(func(context.Context, int, string, string, int, float64) domain.Product); ok {
		r0 = rf(ctx, id, name, productType, count, price)
	} else {
		r0 = ret.Get(0).(domain.Product)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, int, string, string, int, float64) error); ok {
		r1 = rf(ctx, id, name, productType, count, price)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateName provides a mock function with given fields: ctx, id, name
func (_m *ProductService) UpdateName(ctx context.Context, id int, name string) (domain.Product, error) {
	ret := _m.Called(ctx, id, name)

	var r0 domain.Product
	if rf, ok := ret.Get(0).(func(context.Context, int, string) domain.Product); ok {
		r0 = rf(ctx, id, name)
	} else {
		r0 = ret.Get(0).(domain.Product)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, int, string) error); ok {
		r1 = rf(ctx, id, name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type NewProductServiceT interface {
	mock.TestingT
	Cleanup(func())
}

// NewProductService creates a new instance of ProductService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewProductService(t NewProductServiceT) *ProductService {
	mock := &ProductService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
